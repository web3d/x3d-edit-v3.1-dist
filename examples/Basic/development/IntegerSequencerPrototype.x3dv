#X3D V3.0 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 8.7 from Saxonica

PROFILE Immersive
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

META "title" "IntegerSequencerPrototype.x3d"
META "description" "This proto, modeled after a ScalarInterpolator, generates an array of integer values based on the input fraction and keys."
META "warning" "MFInt32 keyValue accessType is listed as initializeOnly/field, since inputOutput cannot be translated to exposedField in VRML97 scripting."
META "authors" "Don Brutzman, Estuko Lippi, Jeff Weekley, Jane Wu, Matthew Braun"
META "created" "20 August 2001"
META "modified" "25 December 2005"
META "reference" "http://www.web3d.org/technicalinfo/specifications/vrml97/part1/nodesRef.html#ScalarInterpolator"
META "subject" "integer sequencer"
META "identifier" "http://www.web3d.org/x3d/content/examples/Basic/development/IntegerSequencerPrototype.x3d"
META "generator" "X3D-Edit, http://www.web3d.org/x3d/content/README.X3D-Edit.html"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

PROTO IntegerSequencer [
  # Regular interpolator-style input
  inputOnly      SFFloat	set_fraction    # [appinfo] range [0..1]

  inputOnly      MFFloat	set_key    # [appinfo] Array sequentially increasing, typically [0..1].  Must have the same number of keys as keyValues.

   ### Warning:  Initializing MFFloat value not provided for field 'key' with @accessType='inputOutput'
inputOutput    MFFloat	key [ ]    # [appinfo] Array sequentially increasing, typically [0..1].  Must have the same number of keys as keyValues.

  outputOnly     MFFloat	key_changed    # [appinfo] Array sequentially increasing, typically [0..1].  Must have the same number of keys as keyValues.

  inputOnly      MFInt32	set_keyValue    # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

   ### Warning:  Initializing MFInt32 value not provided for field 'keyValue' with @accessType='initializeOnly'
initializeOnly MFInt32	keyValue [ ]    # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

  outputOnly     MFInt32	keyValue_changed    # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

  # Regular interpolator-style output
  outputOnly     SFInt32	value_changed
  # Utility methods
  inputOnly      SFBool	previous
  inputOnly      SFBool	next
] {
  Group {
    children [
        Switch {
          children [
            DEF KeyHolder ScalarInterpolator {
                              key IS key
            }
          ]
        }
        DEF SequencerScript Script {
          # Regular interpolator-style input
          inputOnly      SFFloat	set_fraction IS set_fraction            # [appinfo] range [0..1]

          inputOnly      MFFloat	set_key IS set_key            # [appinfo] Array sequentially increasing [0..1].  Must have the same number of keys as keyValues.

          initializeOnly SFNode      keyHolderNode             USE KeyHolder
          outputOnly     MFFloat	key_changed IS key_changed            # [appinfo] Array sequentially increasing [0..1].  Must have the same number of keys as keyValues.

          inputOnly      MFInt32	set_keyValue IS set_keyValue            # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

          initializeOnly MFInt32	keyValue IS keyValue
          outputOnly     MFInt32	keyValue_changed IS keyValue_changed            # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

          # Regular interpolator-style output
          outputOnly     SFInt32	value_changed IS value_changed
          # Utility methods
          inputOnly      SFBool	previous IS previous
          inputOnly      SFBool	next IS next
           ### Warning:  Initializing SFBool value not provided for field 'traceEnabled' with @accessType='initializeOnly'
initializeOnly SFBool	traceEnabled FALSE            # [appinfo] For development use only, not for inclusion in specification implementations.

          # Script-specific interfaces, not needed for node definition
          initializeOnly SFFloat	previousFraction 0.0
          initializeOnly SFInt32	nextIndex 0
          initializeOnly SFBool	valid TRUE
          initializeOnly SFBool	recheckValidity FALSE
          directOutput TRUE
          # Regular interpolator-style input
          # Regular interpolator-style output
          # Utility methods
          # Script-specific interfaces, not needed for node definition
                                                                                                                       ### Warning:  'var' declarations of variables are not persistent in contained ecmascript: code, values are lost after each call. Use <field> definitions instead.

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


var leftToRight;

function initialize(timeStamp)
{
	key      = keyHolderNode.key;
	tracePrint('Initializing a new IntegerSequencer.  key.length=' + key.length + '; keyValue.length=' + keyValue.length);
	tracePrint('key = ' + key);
	tracePrint('keyValue = ' + keyValue);

	validityCheck();
	setHalfKeyRange();

	// assume we start at first key, going left to right
	leftToRight = true;
	previousFraction = key[0];
	nextIndex = 1;  //validityCheck ensures minimum of 2 keys exist
}

function set_fraction(newFraction, timeStamp)
{
	if (recheckValidity) validityCheck();

	if (!valid) return; //IntegerSequencer ignored

	//Bounds checking
	if (newFraction < key[0])
	{
		tracePrint('*** warning: fraction is less than first key.  fraction set to first key ***');
		newFraction = key[0];
	}
	else if (newFraction > key[key.length-1])
	{
		tracePrint('*** warning: fraction is greater than last key.  fraction set to last key ***');
		newFraction = key[key.length -1];
	}

	//Check animation direction
	if (newFraction < previousFraction && leftToRight == true)
	{
		if ((previousFraction - newFraction) > halfKeyRange) //looped around
		{
			nextIndex = 1;
		}
		else //just changed direction
		{
			leftToRight = false;
			nextIndex = nextIndex - 1;
            }
	}
	else if (newFraction > previousFraction && leftToRight == false)
	{
		if ((newFraction - previousFraction) < halfKeyRange) //looped around
		{
			nextIndex = key.length - 2;
		}
		else //just changed direction
		{
			leftToRight = true;
			nextIndex = nextIndex + 1;
            }
	}
	else if (newFraction == previousFraction)
	{ //no change, so no processing required
		return;
	}
	previousFraction = newFraction;

	if (leftToRight) // moving left to right
	{
		while (newFraction > key[nextIndex]) nextIndex++;

		if (newFraction == key[nextIndex])
			value_changed = keyValue[nextIndex];
		else	value_changed = keyValue[nextIndex -1];

		tracePrint('forward animation, fraction = ' + newFraction);
		tracePrint('value_changed eventOut is: ' + value_changed);
	}
	else // moving right to left
	{
		while (newFraction < key[nextIndex]) nextIndex--;

		if (newFraction == key[nextIndex])
			value_changed = keyValue[nextIndex];
		else	value_changed = keyValue[nextIndex + 1];

		tracePrint('backward animation, fraction = ' + newFraction);
		tracePrint('value_changed eventOut is: ' + value_changed);
	}
}

function set_key(newKey, timeStamp)
{
	key = newKey;
	keyHolderNode.key = newKey;
	setHalfKeyWidth();
	recheckValidity = true;
}

function set_keyValue(newKeyValue, timeStamp)
{
	keyValue = newKeyValue;
	recheckValidity = true;
}

function setHalfKeyRange()
{
	halfKeyRange = (key[key.length - 1] - key[0])/2.0;
}

function previous (value, timeStamp)
{
  if (value==true) // trigger on true events only
  {
	leftToRight = true;
	nextIndex = nextIndex - 2; // reset to previous
	if (nextIndex < 0) nextIndex = nextIndex + key.length;
	value_changed = keyValue[nextIndex];
	previousFraction = key[nextIndex];
	nextIndex++; // setup for next time, leftToRight
	if (nextIndex > key.length - 1) nextIndex = 0;
  }
}
function next (value, timeStamp)
{
  if (value==true) // trigger on true events only
  {
	leftToRight = true;
	value_changed = keyValue[nextIndex];
	previousFraction = key[nextIndex];
	nextIndex++; // setup for next time,leftToRight
	if (nextIndex > key.length - 1) nextIndex = 0;
  }
}

function validityCheck()
{
	//Check if lengths of key & keyValue arrays match
	if (key.length != keyValue.length)
	{
		forcePrint('*** error: key and keyValue arrays must be of the same length.  IntegerSequencer ignored ***');
		valid = false;
		return;
	}
	//check to ensure minimum of 2 keys have been specified
	if (key.length < 2)
	{
		forcePrint('*** error: must contain at least 2 keys.  IntegerSequencer ignored ***');
		valid = false;
		return;
	}

	//Check if key array has values in an non-decreasing order
	for (i = 1; i < key.length; i++)
	{
		tracePrint('i= ' + i);

		if (key[i] < key [i-1])
		{
			forcePrint('*** error: key array values must be listed in a non-decreasing order.  IntegerSequencer ignored ***');
			valid = false;
			return;
		}
	}
	valid = true
	recheckValidity = false;
	key_changed = key;
	keyValue_changed = keyValue;
	return;
}

function tracePrint(outputString)
{
	if (traceEnabled) Browser.print ('[IntegerSequencer] ' + outputString);
}

function forcePrint(outputString)
{
	Browser.print ('[IntegerSequencer] ' + outputString);
}
          
" ]
        }
    ]
  }
}
# ===============Example==============
Anchor {
  description "IntegerSequencerExample"
  parameter [ "target=_blank" ]
  url [ "IntegerSequencerExample.wrl"
"https://savage.nps.edu/Savage/Tools/Animation/IntegerSequencerExample.wrl"
"IntegerSequencerExample.x3d"
"https://savage.nps.edu/Savage/Tools/Animation/IntegerSequencerExample.x3d" ]
  children [
      Shape {
        geometry Text {
          string [ "IntegerSequencerPrototype" 
"defines a prototype" 
""
"Click text to see example scene"
"IntegerSequencerExample" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
            size 0.9
          }
        }
        appearance Appearance {
          material Material {
            diffuseColor 1 1 0.2
          }
        }
      }
  ]
}
 ### Hint:  For maximum scene portability, append alternate online address for revised url=' "IntegerSequencerExample.wrl https://savage.nps.edu/Savage/Tools/Animation/IntegerSequencerExample.wrl IntegerSequencerExample.x3d https://savage.nps.edu/Savage/Tools/Animation/IntegerSequencerExample.x3d" "http://...address.../IntegerSequencerExample.wrl https://savage.nps.edu/Savage/Tools/Animation/IntegerSequencerExample.wrl IntegerSequencerExample.x3d https://savage.nps.edu/Savage/Tools/Animation/IntegerSequencerExample.x3d" '
