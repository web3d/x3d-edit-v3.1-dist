#X3D V3.0 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 8.7 from Saxonica

PROFILE Immersive
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

META "title" "PositionInterpolator2dPrototype.x3d"
META "description" "PositionInterpolator2D prototype declaration to pairwise interpolate across an array of Vector2Float/SFVec2f values to produce a single Vector2Float value - click text to see example."
META "creator" "Don Brutzman, Jeff Weekley, Jane Wu"
META "created" "16 October 2001"
META "modified" "25 December 2005"
META "reference" "http://www.web3d.org/technicalinfo/specifications/vrml97/part1/concepts.html#4.6.8"
META "reference" "http://www.web3d.org/technicalinfo/specifications/vrml97/part1/nodesRef.html#CoordinateInterpolator"
META "subject" "PositionInterpolator2D"
META "identifier" "http://www.web3d.org/x3d/content/examples/Basic/development/PositionInterpolator2dPrototype.x3d"
META "generator" "X3D-Edit, http://www.web3d.org/x3d/content/README.X3D-Edit.html"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

PROTO PositionInterpolator2D [
  # [appinfo] Provide interpolation capability for Vector2Float/SFVec2f values


 # documentation: http://www.web3d.org/technicalinfo/specifications/vrml97/part1/concepts.html#4.6.8

  # Regular interpolator-style input
  inputOnly      SFFloat	set_fraction    # [appinfo] The set_fraction eventIn receives an SFFloat event and causes the interpolator function to evaluate, resulting in a value_changed eventOut with the same timestamp as the set_fraction event.

  inputOnly      MFFloat	set_key
   ### Warning:  Initializing MFFloat value not provided for field 'key' with @accessType='inputOutput'
inputOutput    MFFloat	key [ ]    # [appinfo] keyValue holds the array of Vector2FloatArrays that match each animation key.

  outputOnly     MFFloat	key_changed    # [appinfo] Array sequentially increasing, typically [0..1].  Must have the same number of keys as keyValues.

  inputOnly      MFVec2f	set_keyValue    # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

   ### Warning:  Initializing MFVec2f value not provided for field 'keyValue' with @accessType='inputOutput'
inputOutput    MFVec2f	keyValue [ ]    # [appinfo] keyValue holds the array of Vector2Float values that match each animation key.

  outputOnly     MFVec2f	keyValue_changed    # [appinfo] Array of integer values.  Must have the same number of keys as keyValues.

  # Regular interpolator-style output
  outputOnly     SFVec2f	value_changed    # [appinfo] The interpolator function averages between respective keyValue Vector2Floats, resulting in a Vector2Float value_changed eventOut with the same timestamp as the set_fraction event.

] {
  Group {
    children [
        Switch {
          children [
            DEF KeyHolder ScalarInterpolator {
                              key IS key
            }
            Shape {
              geometry IndexedFaceSet {
                texCoord DEF KeyValueHolder TextureCoordinate {
                                      point IS keyValue
                }
              }
            }
          ]
        }
        DEF InterpolationScript Script {
          # Regular interpolator-style input
          inputOnly      SFFloat	set_fraction IS set_fraction
           ### Warning:  Initializing SFFloat value not provided for field 'fraction' with @accessType='initializeOnly'
initializeOnly SFFloat	fraction 0.0            # [appinfo] local variable

          inputOnly      MFFloat	set_key IS set_key
          initializeOnly SFNode      keyHolderNode             USE KeyHolder
          outputOnly     MFFloat	key_changed IS key_changed
          inputOnly      MFVec2f	set_keyValue IS set_keyValue
          initializeOnly SFNode      keyValueHolderNode             USE KeyValueHolder
          outputOnly     MFVec2f	keyValue_changed IS keyValue_changed
          # Regular interpolator-style output
          outputOnly     SFVec2f	value_changed IS value_changed
          directOutput TRUE
          # Regular interpolator-style input
          # Regular interpolator-style output
                                                                                   ### Warning:  outputOnly field 'key_changed' has no assignment statement such as 'key_changed[someIndex]=(someMFFloatExpression);' in contained ecmascript: code
 ### Warning:  outputOnly field 'keyValue_changed' has no assignment statement such as 'keyValue_changed[someIndex]=(someMFVec2fExpression);' in contained ecmascript: code
 ### Warning:  'var' declarations of variables are not persistent in contained ecmascript: code, values are lost after each call. Use <field> definitions instead.

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


// internal global persistent variables
var previousFraction;
var previousFractionIndex;
var blockSize;
var outputArray;

var traceEnabled = false;

function tracePrint (outputString)
{
	if (traceEnabled) Browser.print ('[PositionInterpolator2d] ' + outputString);
}
function forcePrint (outputString)
{
	Browser.print ('[PositionInterpolator2d] ' + outputString);
}
function initialize (timestamp)
{
	key      = keyHolderNode.key;
	keyValue = keyValueHolderNode.point;
	previousFractionIndex = -1;
	previousFraction = 0;
	// check key array ranges [0..1] and is monotonically increasing
	// check that size of keyValue array is integer multiple of size of key array
	tracePrint ('key            =' + key);
	tracePrint ('key.length=     ' + key.length);
	tracePrint ('keyValue=       ' + keyValue);
	tracePrint ('keyValue.length=' + keyValue.length);
	blockSize =  keyValue.length/key.length;
	tracePrint ('blockSize=' + blockSize);
	if (blockSize != 1)
	{
	  forcePrint ('*** warning:  check sizes of key and keyValue, should be identical!');
	}
	if (key[0] != 0)
	{
	  forcePrint ('*** warning:  key[0] != 0');
	}
	if (key[key.length-1] != 1)
	{
	  forcePrint ('*** warning:  key[' + (key.length - 1) + '] != 1, reset from ' + key[key.length-1] + ' to 1');
	  key[key.length-1] = 1;
	}
	for (index = 0; index < key.length; index++)
	{
		if ((key[index] < 0) || (key[index] > 1))
		{
		   forcePrint ('*** warning:  key[' + index + '] = ' + key[index] + ', out of range [0..1]');
		}
	}
}

function set_fraction (inputFloat, timestamp) {
	fraction = inputFloat;
	outputResult = new SFVec2f ();
	tracePrint ('previousFractionIndex=' + previousFractionIndex
		 + ', fraction=' + fraction + ', previousFraction=' + previousFraction);

	if (fraction < 0)
	{
		tracePrint ('*** illegal fraction ' + fraction + ' set to 0');
		fraction = 0;
		previousFractionIndex = 0; // first
	}
	else if (fraction > 1)
	{
		forcePrint ('*** illegal fraction ' + fraction + ' set to 1');
		fraction = 1;
		previousFractionIndex = key.length - 1; // last
	}
	else if (previousFractionIndex == -1)
	{
		previousFractionIndex = 0; // first
		tracePrint ('previousFractionIndex initialized for first event');
	}
	else if ((fraction >= previousFraction) && (fraction >= key[previousFractionIndex+1]))
	{
		previousFractionIndex++;
	}
	else if (fraction < previousFraction) // regress, or loop repeat without reaching one
	{
		previousFractionIndex = 0;
		while ((fraction >= key[previousFractionIndex+1]) && (previousFractionIndex < blockSize))
		{
			previousFractionIndex++;
		}
		tracePrint ('reset/reincrement previousFractionIndex to ' + previousFractionIndex);
	}

	if (fraction == 1) // use final block
	{
		tracePrint ('(fraction == 1)');
		// update outputResult with final keyValue
		outputResult = keyValue[keyValue.length];

		previousFractionIndex = -1; // setup for restart
		tracePrint ('finished final fraction==1 block');
	}
	// when fraction matches index, calculate value_changed from corresponding keyValue array
	else if (fraction == key[previousFractionIndex])
	{
		tracePrint ('(fraction == key[previousFractionIndex])');
		// update outputResult with corresponding keyValue
		outputResult = keyValue[previousFractionIndex];
	}
	else // calculate value_changed by interpolating between adjacent keyValue arrays
	{
		partialFraction = fraction                     - key[previousFractionIndex];
		deltaFraction   = key[previousFractionIndex+1] - key[previousFractionIndex];
		percentFraction = partialFraction / deltaFraction;
	//	tracePrint ('deltaFraction   = ' + deltaFraction);
	//	tracePrint ('partialFraction = ' + partialFraction);
		tracePrint ('percentFraction = ' + percentFraction);
		// no arithmetic operators provided for SFVec2f, treat element by element
		nextKeyValue  = keyValue[previousFractionIndex + 1];
		priorKeyValue = keyValue[previousFractionIndex];
		tracePrint (' nextKeyValue = ' + nextKeyValue);
		tracePrint ('priorKeyValue = ' + priorKeyValue);
		deltaKeyValue = new SFVec2f (	nextKeyValue[0] - priorKeyValue[0],
						nextKeyValue[1] - priorKeyValue[1]);
		//	tracePrint ('deltaKeyValue = ' + deltaKeyValue);
		// update outputResult
		outputResult[0] = keyValue[previousFractionIndex][0]
			        + percentFraction * deltaKeyValue[0];
		outputResult[1] = keyValue[previousFractionIndex][1]
			        + percentFraction * deltaKeyValue[1];
	}
	value_changed = outputResult;
	previousFraction = fraction;
	tracePrint ('value_changed=' + value_changed);
}

function set_key (inputArray, timestamp) {
	key = inputArray;       // update key Vector2FloatArray
	keyHolderNode.key = key; // update holder
	initialize (timestamp); // reverify key, keyValue sizes
}

function set_keyValue (inputArray, timestamp) {
	keyValue = inputArray;  // update keyValue Vector2FloatArray
	keyValueHolderNode.point = keyValue; // update holder
	initialize (timestamp); // reverify key, keyValue sizes
}
          
" ]
        }
    ]
  }
}
# ======================================
# Example use
Anchor {
  description "PositionInterpolator2D Example"
  parameter [ "target=_blank" ]
  url [ "PositionInterpolator2dExample.wrl"
"http://www.web3d.org/x3d/content/examples/Basic/development/PositionInterpolator2dExample.wrl"
"https://savage.nps.edu/Savage/Tools/Animation/PositionInterpolator2dExample.wrl"
"PositionInterpolator2dExample.x3d"
"http://www.web3d.org/x3d/content/examples/Basic/development/PositionInterpolator2dExample.x3d"
"https://savage.nps.edu/Savage/Tools/Animation/PositionInterpolator2dExample.x3d" ]
  children [
      Shape {
        geometry Text {
          string [ "PositionInterpolator2dPrototype" "defines a prototype" ""
"Click text to see" "PositionInterpolator2dExample" " scene" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
            size 0.7
          }
        }
        appearance Appearance {
          material Material {
            diffuseColor 1 1 0.2
          }
        }
      }
  ]
}
