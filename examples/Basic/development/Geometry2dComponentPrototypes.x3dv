#X3D V3.0 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 8.7 from Saxonica

PROFILE Immersive
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

META "title" "Geometry2dComponentPrototypes.x3d"
META "description" "X3D Geometry2D component nodes, implemented as prototypes for backwards compatibility with VRML 97. Arc2D specifies a 2D linear circular arc. ArcClose2D specifies a portion of a circle. Circle2D specifies a 2D circular line. Disk2D specifies a 2D circular disk. Polyline2D specifies 2D line segments. Polypoint2D specifies 2D points. Rectangle2D specifies a 2D rectangle. TriangleSet2D specifies 2D triangles. 2D nodes are considered particularly helpful for building user interfaces such as Heads-Up Displays (HUDs)."
META "authors" "Christos Kalogrias, Don Brutzman, Ken Curtin, Duane Davis"
META "created" "14 November 2003"
META "modified" "19 December 2005"
META "reference" "Geometry2dComponentExamples.x3d"
META "reference" "http://www.web3d.org/spec_editors/abstract/Part01/components/geometry2D.html"
META "subject" "Geometry2D component nodes (Arc2D ArcClose2D Circle2D Disk2D Polyline2D Polypoint2D Rectangle2D TriangleSet2D)"
META "identifier" "http://www.web3d.org/x3d/content/examples/Basic/development/Geometry2dComponentPrototypes.x3d"
META "generator" "X3D-Edit, http://www.web3d.org/x3d/content/README.X3D-Edit.html"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

# ====================
PROTO Arc2D [
  initializeOnly SFFloat	startAngle 0
  initializeOnly SFFloat	endAngle 1.5707963265
  initializeOnly SFFloat	radius 1
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='Arc2D'/> ProtoBody child following first child will not be rendered.
  DEF ArcIndexPoints IndexedLineSet {
    coord DEF Arc3DPoints Coordinate {
    }
  }
  Group {
    children [
        DEF Arc2dToFaceSet3d Script {
          initializeOnly SFFloat	startAngle IS startAngle
          initializeOnly SFFloat	endAngle IS endAngle
          initializeOnly SFFloat	radius IS radius
          outputOnly     MFVec3f	arcSet3d
          outputOnly     MFInt32	arcIndexSet3d
                                               ### Warning:  mismatched square brackets [7 left, 5 right] in contained ecmascript: code
 ### Warning:  mismatched parentheses (19 left, 20 right) in contained ecmascript: code

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize()
{
   numOfPoints = 100;

   if (radius < 0)
   {
      Browser.print ('[Arc2D] Warning:  invalid value, radius=' + value + ' must instead be >= 0');
   }

   if ((startAngle < 0) || (startAngle >= 2 * Math.PI))
   {
	Browser.print ('[Arc2D] Warning: startAngle=' + startAngle +
		' must be within [0..2pi)');
   }

   if ((endAngle< 0) || (endAngle>= 2 * Math.PI))
   {
	Browser.print ('[Arc2D] Warning: endAngle=' + endAngle+
		' must be within [0..2pi)');
    }

    // equal startAngle, endAngle means draw full circle.
    // (high out-of-range endAngle is OK for local computation.
   if (startAngle >= endAngle)
      endAngle = endAngle + 2*Math.PI;


   differAng = Math.abs((endAngle - startAngle))/numOfPoints;

   for ( i=0 ; i<=numOfPoints ; i++)
   {
	arcSet3d[i] = new SFVec3f ( radius*Math.cos(startAngle + i*differAng), radius*Math.sin(startAngle + i*differAng), 0.0 );
        arcIndexSet3d[i] = i;
   }

} // initialize





          
          
" ]
        }
    ]
  ROUTE Arc2dToFaceSet3d.arcSet3d TO Arc3DPoints.point
  ROUTE Arc2dToFaceSet3d.arcIndexSet3d TO ArcIndexPoints.set_coordIndex
  }
}
# ====================
PROTO ArcClose2D [
  initializeOnly SFFloat	startAngle 0
  initializeOnly SFFloat	endAngle 1.5707963265
  initializeOnly SFFloat	radius 1
  initializeOnly SFString	closureType "PIE"
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='ArcClose2D'/> ProtoBody child following first child will not be rendered.
  DEF ArcPointFaceIndex IndexedFaceSet {
    coord DEF ArcClose2DFaceCoordinate Coordinate {
    }
  }
  Group {
    children [
        DEF ArcClose2dToFaceSet3d Script {
          initializeOnly SFString	closureType IS closureType
          initializeOnly SFFloat	startAngle IS startAngle
          initializeOnly SFFloat	endAngle IS endAngle
          initializeOnly SFFloat	radius IS radius
          outputOnly     MFVec3f	arcSet3d
          outputOnly     MFInt32	pointIndex
                                                           ### Warning:  mismatched square brackets [17 left, 15 right] in contained ecmascript: code
 ### Warning:  mismatched parentheses (24 left, 25 right) in contained ecmascript: code

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize()
{
   if (radius < 0)
   {
      Browser.print ('[ArcClose2D] Warning:  invalid value, radius=' + value + ' must instead be >= 0');
   }

   if ((startAngle < 0) || (startAngle >= 2 * Math.PI))
   {
	Browser.print ('[ArcClose2D] Warning: startAngle=' + startAngle +
		' must be within [0..2pi)');
   }

   if ((endAngle< 0) || (endAngle>= 2 * Math.PI))
   {
	Browser.print ('[ArcClose2D] Warning: endAngle=' + endAngle+
		' must be within [0..2pi)');
    }

    // equal startAngle, endAngle means draw full circle.
    // (high out-of-range endAngle is OK for local computation.
   if (startAngle >= endAngle)
      endAngle = endAngle + 2*Math.PI;

   numOfPoints = 100;
   differAng = Math.abs((endAngle - startAngle))/numOfPoints;

   for ( i=0 ; i<=numOfPoints ; i++)
   {
	if ( i == numOfPoints)
             arcSet3d[i] = new SFVec3f (0.0, 0.0, 0.0);
        else
             arcSet3d[i] = new SFVec3f ( radius*Math.cos(startAngle + i*differAng), radius*Math.sin(startAngle + i*differAng), 0.0 );
   }

   k=0;
   if (closureType == 'PIE')
       for ( i=0 ; i<numOfPoints ; i++)
       {
        	pointIndex[k]   = numOfPoints;
        	pointIndex[k+1] = i;
        	pointIndex[k+2] = i + 1;
        	pointIndex[k+3]   = numOfPoints;
        	pointIndex[k+4] = -1;
        k=k+5;
	}
   else
       for ( i=0 ; i<numOfPoints-1 ; i++)
       {
              pointIndex[k]   = 0;
              pointIndex[k+1] = i;
              pointIndex[k+2] = i + 1;
              pointIndex[k+3]   = 0;
              pointIndex[k+4] = -1;
        k=k+5;
	}

} // initialize
          
" ]
        }
    ]
  ROUTE ArcClose2dToFaceSet3d.arcSet3d TO ArcClose2DFaceCoordinate.point
  ROUTE ArcClose2dToFaceSet3d.pointIndex TO ArcPointFaceIndex.set_coordIndex
  }
}
# ArcClose2DUnfilled also provided since FillProperties not available in VRML 97
PROTO ArcClose2DUnfilled [
  initializeOnly SFFloat	startAngle 0
  initializeOnly SFFloat	endAngle 1.5707963265
  initializeOnly SFFloat	radius 1
  initializeOnly SFString	closureType "PIE"
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='ArcClose2DUnfilled'/> ProtoBody child following first child will not be rendered.
  DEF ArcPointLineIndex IndexedLineSet {
    coord DEF ArcClose2DLineCoordinate Coordinate {
    }
  }
  Group {
    children [
        DEF ArcClose2dToLineSet3d Script {
          initializeOnly SFString	closureType IS closureType
          initializeOnly SFFloat	startAngle IS startAngle
          initializeOnly SFFloat	endAngle IS endAngle
          initializeOnly SFFloat	radius IS radius
          outputOnly     MFVec3f	arcSet3d
          outputOnly     MFInt32	pointIndex
                                                           ### Warning:  mismatched square brackets [11 left, 9 right] in contained ecmascript: code
 ### Warning:  mismatched parentheses (25 left, 26 right) in contained ecmascript: code

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize()
{

   if (radius < 0)
   {
      Browser.print ('[ArcCloseUnfilled2D] Warning:  invalid value, radius=' + value + ' must instead be >= 0');
   }

   if ((startAngle < 0) || (startAngle >= 2 * Math.PI))
   {
	Browser.print ('[ArcCloseUnfilled2D] Warning: startAngle=' + startAngle +
		' must be within [0..2pi)');
   }

   if ((endAngle< 0) || (endAngle>= 2 * Math.PI))
   {
	Browser.print ('[ArcCloseUnfilled2D] Warning: endAngle=' + endAngle+
		' must be within [0..2pi)');
    }

    // equal startAngle, endAngle means draw full circle.
    // (high out-of-range endAngle is OK for local computation.
   if (startAngle >= endAngle)
      endAngle = endAngle + 2*Math.PI;

   numOfPoints = 100;
   differAng = Math.abs((endAngle - startAngle))/numOfPoints;

   for ( i=0 ; i<=numOfPoints +1 ; i++)
   {
	if ( i == numOfPoints +1)
             arcSet3d[i] = new SFVec3f (0.0, 0.0, 0.0);
        else
             arcSet3d[i] = new SFVec3f ( radius*Math.cos(startAngle + i*differAng), radius*Math.sin(startAngle + i*differAng), 0.0 );
   }

   if (closureType == 'CHORD')
   {
	for ( i=0 ; i<=numOfPoints +1 ; i++)
	{
        	if ( i == numOfPoints +1)
             		pointIndex[i] = 0.0;
        	else
             		pointIndex[i] = i;
	}
   }
   else
   {
	for ( i=0 ; i<=numOfPoints +1 ; i++)
	{
         pointIndex[i] = i;
	}
         pointIndex[i] = 0.0;
   }

} // initialize
          
" ]
        }
    ]
  ROUTE ArcClose2dToLineSet3d.arcSet3d TO ArcClose2DLineCoordinate.point
  ROUTE ArcClose2dToLineSet3d.pointIndex TO ArcPointLineIndex.set_coordIndex
  }
}
# ====================
PROTO Circle2D [
  initializeOnly SFFloat	radius 1
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='Circle2D'/> ProtoBody child following first child will not be rendered.
  DEF Circ3DPointsIndex IndexedLineSet {
    coord DEF Circ3DPoints Coordinate {
    }
  }
  Group {
    children [
        DEF Circ2dToLineSet3d Script {
          initializeOnly SFFloat	radius IS radius
          outputOnly     MFVec3f	circSet3d
          outputOnly     MFInt32	circIndexSet3d
                      
	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize()
{
    if (radius < 0)
   {
      Browser.print ('[Circle2D] Warning:  invalid value, radius=' + value + ' must instead be >= 0');
   }


   numOfPoints = 100;
   differAng = 2*Math.PI/numOfPoints;

   for ( i=0 ; i<=numOfPoints ; i++)
   {
	circSet3d[i] = new SFVec3f ( radius*Math.cos(i*differAng), radius*Math.sin(i*differAng), 0.0 );
        circIndexSet3d[i] = i;
   }

} // initialize
          
" ]
        }
    ]
  ROUTE Circ2dToLineSet3d.circSet3d TO Circ3DPoints.point
  ROUTE Circ2dToLineSet3d.circIndexSet3d TO Circ3DPointsIndex.set_coordIndex
  }
}
# ====================
PROTO Disk2D [
  initializeOnly SFFloat	innerRadius 0
  initializeOnly SFFloat	outerRadius 1
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='Disk2D'/> ProtoBody child following first child will not be rendered.
  DEF DiskPointsIndex IndexedFaceSet {
    coord DEF Disk3DPoints Coordinate {
    }
  }
  Group {
    children [
        DEF Disk2dToFaceSet3d Script {
          initializeOnly SFFloat	innerRadius IS innerRadius
          initializeOnly SFFloat	outerRadius IS outerRadius
          outputOnly     MFVec3f	diskSet3d
          outputOnly     MFInt32	diskIndexSet3d
                                  
	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize()
{
   if (innerRadius < 0)
   {
      Browser.print ('[Disk2D] Warning:  invalid value, innerRadius=' + value + ' must instead be >= 0');
   }

   if (outerRadius < 0)
   {
      Browser.print ('[Disk2D] Warning:  invalid value, outerRadius=' + value + ' must instead be >= 0');
   }



   numOfPoints    = 100.0;
   diskSet3d      = new MFVec3f();
   diskIndexSet3d = new MFInt32();
   differAng = 2 * Math.PI/numOfPoints;


   for ( i=0 ; i<2*numOfPoints ; i++)
   {
        if ( i<numOfPoints)
	     diskSet3d[i] = new SFVec3f ( innerRadius*Math.cos(i*differAng), innerRadius*Math.sin(i*differAng), 0.0 );
        else
             diskSet3d[i] = new SFVec3f ( outerRadius*Math.cos((i-numOfPoints-1.0)*differAng), outerRadius*Math.sin((i-numOfPoints-1.0)*differAng), 0.0 );
   }


   k=0;
   for (i=0 ; i<numOfPoints ; i++)
   {
        diskIndexSet3d[k]   = i;
        diskIndexSet3d[k+1] = i + numOfPoints;
        diskIndexSet3d[k+2] = i + numOfPoints + 1;
        diskIndexSet3d[k+3]   = i;
        diskIndexSet3d[k+4] = -1;
        diskIndexSet3d[k+5] = i+1;
        diskIndexSet3d[k+6] = i ;
        diskIndexSet3d[k+7] = i + numOfPoints +1;
        diskIndexSet3d[k+8] = i +1;
        diskIndexSet3d[k+9] = -1;

        if (i == numOfPoints-1)
        {
        diskIndexSet3d[k]   = i;
        diskIndexSet3d[k+1] = i + numOfPoints;
        diskIndexSet3d[k+2] = numOfPoints;
        diskIndexSet3d[k+3]   = i;
        diskIndexSet3d[k+4] = -1;
        diskIndexSet3d[k+5] = 0;
        diskIndexSet3d[k+6] = i;
        diskIndexSet3d[k+7] = numOfPoints;
        diskIndexSet3d[k+8] = 0;
        diskIndexSet3d[k+9] = -1;
        }
   k=k+10;
   }

} // initialize
          
" ]
        }
    ]
  ROUTE Disk2dToFaceSet3d.diskSet3d TO Disk3DPoints.point
  ROUTE Disk2dToFaceSet3d.diskIndexSet3d TO DiskPointsIndex.set_coordIndex
  }
}
# ====================
PROTO Polyline2D [
   ### Warning:  Initializing MFVec2f value not provided for field 'lineSegments' with @accessType='initializeOnly'
initializeOnly MFVec2f	lineSegments [ ]
  initializeOnly SFBool	solid FALSE
   ### Info:  Initializing child SFNode not provided for field 'metadata' with @accessType='inputOutput'
inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

] {
 ### Warning:  <ProtoDeclare name='Polyline2D'/> ProtoBody child following first child will not be rendered.
  DEF LinesSegmentsIndexPoints IndexedLineSet {
    coord DEF LineSegments3DPoints Coordinate {
    }
  }
  Group {
    children [
        DEF LineSegments2dToLineSet3d Script {
          initializeOnly MFVec2f	lineSegments IS lineSegments
          outputOnly     MFVec3f	lineSegments3D
          outputOnly     MFInt32	lineSegmentsIndex
                      
	url [ "ecmascript:

function initialize()
{
   for ( i=0 ; i<lineSegments.length ; i++)
   {
          lineSegments3D[i] = new SFVec3f ( lineSegments[i].x, lineSegments[i].y, 0.0 );
          lineSegmentsIndex[i] = i;
   }

     lineSegmentsIndex[i] = -1;

} // initialize
          
" ]
        }
    ]
  ROUTE LineSegments2dToLineSet3d.lineSegments3D TO LineSegments3DPoints.point
  ROUTE LineSegments2dToLineSet3d.lineSegmentsIndex TO LinesSegmentsIndexPoints.set_coordIndex
  }
}
# ====================
PROTO Polypoint2D [
   ### Warning:  Initializing MFVec2f value not provided for field 'point' with @accessType='initializeOnly'
initializeOnly MFVec2f	point [ ]
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='Polypoint2D'/> ProtoBody child following first child will not be rendered.
  PointSet {
    coord DEF Points3D Coordinate {
    }
  }
  Group {
    children [
        DEF Points2dToLineSet3d Script {
          initializeOnly MFVec2f	points IS points
          outputOnly     MFVec3f	points3D
                       ### Error:  IS/connect/@protoField='points' does not match any of containing ProtoDeclare/ProtoInterface/field/@name definitions

	url [ "ecmascript:

function initialize()
{

   for ( i=0 ; i<points.length ; i++)
   {
          points3D[i] = new SFVec3f ( points[i].x, points[i].y, 0.0 );
   }

} // initialize
          
" ]
        }
    ]
  ROUTE Points2dToLineSet3d.points3D TO Points3D.point
  }
}
# ====================
PROTO Rectangle2D [
  # [appinfo] Default filled, matching default FillProperties filled=true.

  initializeOnly SFVec2f	size 2 2
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='Rectangle2D'/> ProtoBody child following first child will not be rendered.
  IndexedFaceSet {
    coordIndex [ 0 1 2 0 -1 
2 3 0 2  ]
    solid FALSE
    coord DEF RectanglePoints Coordinate {
    }
  }
  Group {
    children [
        DEF Rect2dToFaceSet3d Script {
          initializeOnly SFVec2f	size IS size
          outputOnly     MFVec3f	pointSet3d
          outputOnly     SFInt32	fillNoFillSelection
                       ### Warning:  outputOnly field 'fillNoFillSelection' has no assignment statement such as 'fillNoFillSelection=(someSFInt32Expression);' in contained ecmascript: code

	url [ "ecmascript:

function initialize()
{
   xDim = size[0];
   yDim = size[1];

   pointSet3d[0] = new SFVec3f ( (-xDim / 2.0), (yDim / 2.0), 0.0 );
   pointSet3d[1] = new SFVec3f ( (-xDim / 2.0), (-yDim / 2.0), 0.0 );
   pointSet3d[2] = new SFVec3f ( (xDim / 2.0), (-yDim / 2.0), 0.0 );
   pointSet3d[3] = new SFVec3f ( (xDim / 2.0), (yDim / 2.0), 0.0 );

} // initialize

          
          
" ]
        }
    ]
  ROUTE Rect2dToFaceSet3d.pointSet3d TO RectanglePoints.point
  }
}
# Rectangle2DUnfilled also provided since FillProperties not available in VRML 97
PROTO Rectangle2DUnfilled [
  initializeOnly SFVec2f	size 2 2
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='Rectangle2DUnfilled'/> ProtoBody child following first child will not be rendered.
  IndexedLineSet {
    coordIndex [ 0 1 2 3 0 ]
    coord DEF RectanglePointsLine Coordinate {
    }
  }
  Group {
    children [
        DEF Rect2dToLineSet3d Script {
          initializeOnly SFVec2f	size IS size
          outputOnly     MFVec3f	pointSet3d
          outputOnly     SFInt32	fillNoFillSelection
                       ### Warning:  outputOnly field 'fillNoFillSelection' has no assignment statement such as 'fillNoFillSelection=(someSFInt32Expression);' in contained ecmascript: code

	url [ "ecmascript:

function initialize()
{
   xDim = size[0];
   yDim = size[1];

   pointSet3d[0] = new SFVec3f ( (-xDim / 2.0), (yDim / 2.0), 0.0 );
   pointSet3d[1] = new SFVec3f ( (-xDim / 2.0), (-yDim / 2.0), 0.0 );
   pointSet3d[2] = new SFVec3f ( (xDim / 2.0), (-yDim / 2.0), 0.0 );
   pointSet3d[3] = new SFVec3f ( (xDim / 2.0), (yDim / 2.0), 0.0 );

} // initialize

          
          
" ]
        }
    ]
  ROUTE Rect2dToLineSet3d.pointSet3d TO RectanglePointsLine.point
  }
}
# ====================
PROTO TriangleSet2D [
   ### Warning:  Initializing MFVec2f value not provided for field 'vertices' with @accessType='initializeOnly'
initializeOnly MFVec2f	vertices [ ]
  initializeOnly SFBool	solid FALSE
  inputOutput    SFNode      metadata NULL    # [appinfo] Metadata node only

    # default NULL

] {
 ### Warning:  <ProtoDeclare name='TriangleSet2D'/> ProtoBody child following first child will not be rendered.
  DEF TriangleSetIndexPoints IndexedFaceSet {
    solid FALSE
    coord DEF TriangleSet3DPoints Coordinate {
    }
  }
  Group {
    children [
        DEF TriangleSet2dToLineSet3d Script {
          initializeOnly MFVec2f	vertices IS vertices
          outputOnly     MFVec3f	triangleSet3D
          outputOnly     MFInt32	triangleSetIndex
                      
	url [ "ecmascript:

function initialize()
{
   numbOfTriangles = Math.floor(vertices.length/3);

   for ( i=0 ; i<3*numbOfTriangles ; i++)
   {
          triangleSet3D[i] = new SFVec3f ( vertices[i].x, vertices[i].y, 0.0 );
   }

   k=0;
   for (i=0; i<numbOfTriangles; i++)
   {
        triangleSetIndex[k] = k - i ;
        triangleSetIndex[k+1] = k - i + 1 ;
        triangleSetIndex[k+2] = k - i + 2 ;
        triangleSetIndex[k+3] = -1 ;

        k=k+4;
    }

} // initialize
          
" ]
        }
    ]
  ROUTE TriangleSet2dToLineSet3d.triangleSet3D TO TriangleSet3DPoints.point
  ROUTE TriangleSet2dToLineSet3d.triangleSetIndex TO TriangleSetIndexPoints.set_coordIndex
  }
}
# ====================
Background {
  groundColor [ 0.25 0.25 0.25 ]
  skyColor [ 0.25 0.25 0.25 ]
}
DEF LinkToExamples Anchor {
  description "link to examples"
  url [ "Geometry2dComponentExamples.wrl"
"http://www.web3d.org/x3d/content/examples/Basic/development/Geometry2dComponentExamples.wrl"
"Geometry2dComponentExamples.x3d"
"http://www.web3d.org/x3d/content/examples/Basic/development/Geometry2dComponentExamples.x3d" ]
  children [
      Shape {
        appearance Appearance {
          material Material {
            diffuseColor 0.8 0.6 0.2
          }
        }
        geometry Text {
          string [ "Geometry2dComponentPrototypes" "is a developmental file." "Click this text to view" "Geometry2dComponentExamples" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
            size 0.75
          }
        }
      }
  ]
}
