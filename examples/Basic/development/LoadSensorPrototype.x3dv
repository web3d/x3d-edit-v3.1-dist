#X3D V3.0 utf8
# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 8.7 from Saxonica

PROFILE Immersive
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

META "title" "LoadSensorPrototype.x3d"
META "description" "LoadSensor prototype for VRML 97 use.  Assumes correct loading of resources and provides output events based on timeOut delay."
META "created" "26 December 2003"
META "modified" "27 December 2003"
META "creator" "Don Brutzman"
META "hint" "Set LoadSensorScript traceEnabled true/false to enable/disable console trace text."
META "warning" "This LoadSensor implementation for VRML 97 only emulates LoadSensor events and cannot sense actual loading of watchList resources.  Use an X3D-compliant browser for complete LoadSensor capability."
META "reference" "LoadSensorExample.x3d"
META "reference" "LoadSensorPrototypeInitializationTrace.txt"
META "identifier" "http://www.web3d.org/x3d/content/examples/Basic/development/LoadSensorPrototype.x3d"
META "generator" "X3D-Edit, http://www.web3d.org/x3d/content/README.X3D-Edit.html"
META "license" "../../license.html"

# [Scene] ========== ========== ==========

NavigationInfo { type [ "EXAMINE" "ANY" ] } ###  Default X3D NavigationInfo

PROTO LoadSensor [
  # [appinfo] LoadSensor monitors the progress and success of downloading URL elements over a network.  Only nodes that contain a valid URL field (i.e., descendants of X3DUrlObject), may be specified as watchList children.  Multiple nodes may be watched with a single LoadSensor.


 # documentation: http://www.web3d.org/specifications/ISO-IEC-19775/Part01/components/networking.html#LoadSensor

  inputOutput    SFBool	enabled TRUE    # [appinfo] Enables/disables the sensor node.

  inputOutput    SFTime	timeOut 0    # [appinfo] Maximum time for which the LoadSensor will monitor loading, starting from when the sensor becomes active.  timeOut=0 ordinarily indicates an indefinite time out period; i.e., the LoadSensor will wait until loading has completed either with success or failure timeOut=0 causes immediate loading for this implementation.

   ### Info:  Initializing child MFNode not provided for field 'watchList' with @accessType='initializeOnly'
initializeOnly MFNode	watchList [ ]    # [appinfo] Zero or more nodes with url fields to monitor.

  inputOnly      MFNode	set_watchList    # [appinfo] Change watchList MFNode array.

  outputOnly     SFBool	isActive    # [appinfo] isActive=true when loading begins, isActive=false when loading ends.

  outputOnly     SFBool	isLoaded    # [appinfo] isLoaded=true when loading succeeds, isLoaded=false when loading fails or timeOut reached.

  outputOnly     SFTime	loadTime    # [appinfo] loadTime event is generated when loading has successfully completed.

  outputOnly     SFFloat	progress    # [appinfo] progress [0..1] indicates fraction of loading complete.

   ### Info:  Initializing child SFNode not provided for field 'metadata' with @accessType='initializeOnly'
initializeOnly SFNode      metadata NULL    # [appinfo] associated Metadata node.

] {
  Group {
    children [
        DEF Clock TimeSensor {
          loop TRUE
                      enabled IS enabled
            cycleInterval IS timeOut
        }
        DEF LoadSensorScript Script {
          initializeOnly SFNode      ClockNode             USE Clock
          outputOnly     SFTime	loopStart
          inputOnly      SFFloat	fraction
          initializeOnly SFFloat	priorFraction 0
          outputOnly     SFFloat	progress IS progress
          initializeOnly MFNode	watchList IS watchList
          inputOnly      MFNode	set_watchList IS set_watchList
          outputOnly     SFBool	isActive IS isActive
          outputOnly     SFBool	isLoaded IS isLoaded
          outputOnly     SFTime	loadTime IS loadTime
          initializeOnly SFBool	traceEnabled FALSE
          directOutput TRUE
                                                                                   ### Warning:  outputOnly field 'loopStart' has no assignment statement such as 'loopStart=(someSFTimeExpression);' in contained ecmascript: code

	url [ "ecmascript:
// ### X3D Browser.print() not supported by all VRML97 viewers, instead simply use print()


function initialize (timestamp)
{
	enabled = ClockNode.enabled;
	tracePrint ('initialize() enabled=' + enabled);
	if (enabled)
	{
		isActive = true;
		// isLoaded event only sent upon completion
		progress = 0.0;
		tracePrintEvents ();
		timeOut = ClockNode.cycleInterval;
		tracePrint ('timeOut=' + timeOut);
		if (timeOut <= 0.0) // instantaneous, no loop
		{
			isActive = false;
			isLoaded = true;
			progress = 1.0;
			loadTime = timestamp;
			tracePrintEvents ();
		}
	}
}
function fraction (value, timestamp)
{
	enabled = ClockNode.enabled;
	if (enabled)
		tracePrint ('progress=' + value + ', priorFraction=' + priorFraction);
	// use priorFraction to check for looping, then stop loop
	if (enabled && ((value >=1) || (value < priorFraction)))
	{
		isActive = false;
		isLoaded = true;
		loadTime = timestamp;
		progress = 1;
		tracePrintEvents ();
		tracePrint ('complete');
	}
	else progress= value; // output event
	priorFraction = progress;
}
function set_watchList (value, timestamp)
{
	watchList = value;
}
function tracePrintEvents ()
{
	tracePrint ('isActive=' + isActive);
	tracePrint ('isLoaded=' + isLoaded);
	tracePrint ('loadTime=' + loadTime);
	tracePrint ('progress=' + progress);
}
function tracePrint (outputString)
{
	if (traceEnabled) Browser.print ('[LoadSensor] ' + outputString);
}
function forcePrint (outputString)
{
	Browser.print ('[LoadSensor] ' + outputString);
}
          
" ]
        }
        Collision {
          enabled FALSE
                      proxy IS metadata
        }
    ]
  ROUTE LoadSensorScript.loopStart TO Clock.startTime
  ROUTE LoadSensorScript.isActive TO Clock.enabled
  ROUTE Clock.fraction_changed TO LoadSensorScript.fraction
  }
}
# ======================================
# Example use
Anchor {
  description "LoadSensorExample"
  parameter [ "target=_blank" ]
  url [ "LoadSensorExample.wrl"
"http://www.web3d.org/x3d/content/examples/Basic/development/LoadSensorExample.wrl"
"LoadSensorExample.x3d"
"http://www.web3d.org/x3d/content/examples/Basic/development/LoadSensorExample.x3d" ]
  children [
      Shape {
        geometry Text {
          string [ "LoadSensorPrototype" "defines a prototype" ""
"Click on this text to see" "LoadSensorExample scene" ]
          fontStyle FontStyle {
            justify [ "MIDDLE" "MIDDLE"  ] 
            size 0.7
          }
        }
        appearance Appearance {
          material Material {
            diffuseColor 1 1 0.2
          }
        }
      }
  ]
}
